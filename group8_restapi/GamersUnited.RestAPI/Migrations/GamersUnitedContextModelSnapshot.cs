// <auto-generated />
using System;
using GamersUnited.Infrastructure.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GamersUnited.RestAPI.Migrations
{
    [DbContext(typeof(GamersUnitedContext))]
    partial class GamersUnitedContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GamersUnited.Core.Entities.Game", b =>
                {
                    b.Property<int>("GameId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GenreGameGenreId");

                    b.Property<int>("ProductFK");

                    b.HasKey("GameId");

                    b.HasIndex("GenreGameGenreId");

                    b.HasIndex("ProductFK")
                        .IsUnique();

                    b.ToTable("Game");
                });

            modelBuilder.Entity("GamersUnited.Core.Entities.GameGenre", b =>
                {
                    b.Property<int>("GameGenreId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("GameGenreId");

                    b.ToTable("GameGenre");
                });

            modelBuilder.Entity("GamersUnited.Core.Entities.Invoice", b =>
                {
                    b.Property<int>("InvoiceId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CustomerUserId");

                    b.Property<DateTime>("DateSold");

                    b.HasKey("InvoiceId");

                    b.HasIndex("CustomerUserId");

                    b.ToTable("Invoice");
                });

            modelBuilder.Entity("GamersUnited.Core.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CategoryProductCategoryId");

                    b.Property<string>("Description");

                    b.Property<string>("ImageUrl");

                    b.Property<string>("Name");

                    b.Property<double>("Price");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryProductCategoryId");

                    b.ToTable("Product");
                });

            modelBuilder.Entity("GamersUnited.Core.Entities.ProductCategory", b =>
                {
                    b.Property<int>("ProductCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("ProductCategoryId");

                    b.ToTable("ProductCategory");
                });

            modelBuilder.Entity("GamersUnited.Core.Entities.Sold", b =>
                {
                    b.Property<int>("SoldId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId");

                    b.Property<string>("CDKey");

                    b.HasKey("SoldId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Sold");
                });

            modelBuilder.Entity("GamersUnited.Core.Entities.SoldInvoiceRelation", b =>
                {
                    b.Property<int>("SoldId");

                    b.Property<int>("ProductId");

                    b.Property<int>("InvoiceId");

                    b.HasKey("SoldId", "ProductId", "InvoiceId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("SoldInvoiceRelation");
                });

            modelBuilder.Entity("GamersUnited.Core.Entities.Stock", b =>
                {
                    b.Property<int>("StockId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductId");

                    b.Property<string>("CDKey");

                    b.HasKey("StockId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("Stock");
                });

            modelBuilder.Entity("GamersUnited.Core.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address");

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<bool>("IsAdmin");

                    b.Property<string>("LastName");

                    b.Property<string>("Password");

                    b.Property<int>("PhoneNumber");

                    b.HasKey("UserId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("GamersUnited.Core.Entities.Game", b =>
                {
                    b.HasOne("GamersUnited.Core.Entities.GameGenre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreGameGenreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GamersUnited.Core.Entities.Product", "Product")
                        .WithOne()
                        .HasForeignKey("GamersUnited.Core.Entities.Game", "ProductFK")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GamersUnited.Core.Entities.Invoice", b =>
                {
                    b.HasOne("GamersUnited.Core.Entities.User", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerUserId");
                });

            modelBuilder.Entity("GamersUnited.Core.Entities.Product", b =>
                {
                    b.HasOne("GamersUnited.Core.Entities.ProductCategory", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryProductCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GamersUnited.Core.Entities.Sold", b =>
                {
                    b.HasOne("GamersUnited.Core.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GamersUnited.Core.Entities.SoldInvoiceRelation", b =>
                {
                    b.HasOne("GamersUnited.Core.Entities.Invoice", "Invoice")
                        .WithMany("Products")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GamersUnited.Core.Entities.Sold", "Sold")
                        .WithMany()
                        .HasForeignKey("SoldId", "ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GamersUnited.Core.Entities.Stock", b =>
                {
                    b.HasOne("GamersUnited.Core.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
